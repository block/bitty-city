/*
 * This file is generated by jOOQ.
 */
package xyz.block.bittycity.outie.jooq.generated.tables


import java.time.LocalDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong

import xyz.block.bittycity.outie.jooq.generated.BittyCity
import xyz.block.bittycity.outie.jooq.generated.indexes.WITHDRAWAL_SPEED_OPTIONS_WITHDRAWAL_IDX
import xyz.block.bittycity.outie.jooq.generated.keys.KEY_WITHDRAWAL_SPEED_OPTIONS_PRIMARY
import xyz.block.bittycity.outie.jooq.generated.keys.KEY_WITHDRAWAL_SPEED_OPTIONS_UQ_WITHDRAWAL_TOKEN_SPEED
import xyz.block.bittycity.outie.jooq.generated.tables.records.WithdrawalSpeedOptionsRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class WithdrawalSpeedOptions(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, WithdrawalSpeedOptionsRecord>?,
    parentPath: InverseForeignKey<out Record, WithdrawalSpeedOptionsRecord>?,
    aliased: Table<WithdrawalSpeedOptionsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<WithdrawalSpeedOptionsRecord>(
    alias,
    BittyCity.BITTY_CITY,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>bitty_city.withdrawal_speed_options</code>
         */
        val WITHDRAWAL_SPEED_OPTIONS: WithdrawalSpeedOptions = WithdrawalSpeedOptions()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<WithdrawalSpeedOptionsRecord> = WithdrawalSpeedOptionsRecord::class.java

    /**
     * The column <code>bitty_city.withdrawal_speed_options.id</code>.
     */
    val ID: TableField<WithdrawalSpeedOptionsRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>bitty_city.withdrawal_speed_options.version</code>.
     */
    val VERSION: TableField<WithdrawalSpeedOptionsRecord, ULong?> = createField(DSL.name("version"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>bitty_city.withdrawal_speed_options.created_at</code>.
     */
    val CREATED_AT: TableField<WithdrawalSpeedOptionsRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>bitty_city.withdrawal_speed_options.updated_at</code>.
     */
    val UPDATED_AT: TableField<WithdrawalSpeedOptionsRecord, LocalDateTime?> = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column
     * <code>bitty_city.withdrawal_speed_options.withdrawal_token</code>.
     */
    val WITHDRAWAL_TOKEN: TableField<WithdrawalSpeedOptionsRecord, String?> = createField(DSL.name("withdrawal_token"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column <code>bitty_city.withdrawal_speed_options.block_target</code>.
     */
    val BLOCK_TARGET: TableField<WithdrawalSpeedOptionsRecord, Int?> = createField(DSL.name("block_target"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>bitty_city.withdrawal_speed_options.speed</code>.
     */
    val SPEED: TableField<WithdrawalSpeedOptionsRecord, String?> = createField(DSL.name("speed"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>bitty_city.withdrawal_speed_options.total_fee</code>.
     */
    val TOTAL_FEE: TableField<WithdrawalSpeedOptionsRecord, Long?> = createField(DSL.name("total_fee"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column
     * <code>bitty_city.withdrawal_speed_options.total_fee_fiat_units</code>.
     */
    val TOTAL_FEE_FIAT_UNITS: TableField<WithdrawalSpeedOptionsRecord, Long?> = createField(DSL.name("total_fee_fiat_units"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column
     * <code>bitty_city.withdrawal_speed_options.total_fee_fiat_currency</code>.
     */
    val TOTAL_FEE_FIAT_CURRENCY: TableField<WithdrawalSpeedOptionsRecord, String?> = createField(DSL.name("total_fee_fiat_currency"), SQLDataType.VARCHAR(16).nullable(false), this, "")

    /**
     * The column <code>bitty_city.withdrawal_speed_options.service_fee</code>.
     */
    val SERVICE_FEE: TableField<WithdrawalSpeedOptionsRecord, Long?> = createField(DSL.name("service_fee"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>bitty_city.withdrawal_speed_options.service_fee_margin</code>.
     */
    val SERVICE_FEE_MARGIN: TableField<WithdrawalSpeedOptionsRecord, Int?> = createField(DSL.name("service_fee_margin"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>bitty_city.withdrawal_speed_options.approximate_wait_time_minutes</code>.
     */
    val APPROXIMATE_WAIT_TIME_MINUTES: TableField<WithdrawalSpeedOptionsRecord, Int?> = createField(DSL.name("approximate_wait_time_minutes"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>bitty_city.withdrawal_speed_options.selectable</code>.
     */
    val SELECTABLE: TableField<WithdrawalSpeedOptionsRecord, Byte?> = createField(DSL.name("selectable"), SQLDataType.TINYINT, this, "")

    private constructor(alias: Name, aliased: Table<WithdrawalSpeedOptionsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<WithdrawalSpeedOptionsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<WithdrawalSpeedOptionsRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>bitty_city.withdrawal_speed_options</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>bitty_city.withdrawal_speed_options</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>bitty_city.withdrawal_speed_options</code> table reference
     */
    constructor(): this(DSL.name("withdrawal_speed_options"), null)
    override fun getSchema(): Schema? = if (aliased()) null else BittyCity.BITTY_CITY
    override fun getIndexes(): List<Index> = listOf(WITHDRAWAL_SPEED_OPTIONS_WITHDRAWAL_IDX)
    override fun getIdentity(): Identity<WithdrawalSpeedOptionsRecord, Long?> = super.getIdentity() as Identity<WithdrawalSpeedOptionsRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<WithdrawalSpeedOptionsRecord> = KEY_WITHDRAWAL_SPEED_OPTIONS_PRIMARY
    override fun getUniqueKeys(): List<UniqueKey<WithdrawalSpeedOptionsRecord>> = listOf(KEY_WITHDRAWAL_SPEED_OPTIONS_UQ_WITHDRAWAL_TOKEN_SPEED)
    override fun `as`(alias: String): WithdrawalSpeedOptions = WithdrawalSpeedOptions(DSL.name(alias), this)
    override fun `as`(alias: Name): WithdrawalSpeedOptions = WithdrawalSpeedOptions(alias, this)
    override fun `as`(alias: Table<*>): WithdrawalSpeedOptions = WithdrawalSpeedOptions(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): WithdrawalSpeedOptions = WithdrawalSpeedOptions(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): WithdrawalSpeedOptions = WithdrawalSpeedOptions(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): WithdrawalSpeedOptions = WithdrawalSpeedOptions(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition): WithdrawalSpeedOptions = WithdrawalSpeedOptions(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): WithdrawalSpeedOptions = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition): WithdrawalSpeedOptions = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>): WithdrawalSpeedOptions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): WithdrawalSpeedOptions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): WithdrawalSpeedOptions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): WithdrawalSpeedOptions = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): WithdrawalSpeedOptions = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): WithdrawalSpeedOptions = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): WithdrawalSpeedOptions = where(DSL.notExists(select))
}
