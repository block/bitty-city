/*
 * This file is generated by jOOQ.
 */
package xyz.block.bittycity.outie.jooq.generated.tables.records


import java.time.LocalDateTime

import org.jooq.JSON
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.ULong

import xyz.block.bittycity.outie.jooq.generated.tables.WithdrawalResponses


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class WithdrawalResponsesRecord() : UpdatableRecordImpl<WithdrawalResponsesRecord>(WithdrawalResponses.WITHDRAWAL_RESPONSES) {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var version: ULong?
        set(value): Unit = set(1, value)
        get(): ULong? = get(1) as ULong?

    open var createdAt: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    open var updatedAt: LocalDateTime?
        set(value): Unit = set(3, value)
        get(): LocalDateTime? = get(3) as LocalDateTime?

    open var idempotencyKey: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var withdrawalToken: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var responseSnapshot: JSON?
        set(value): Unit = set(6, value)
        get(): JSON? = get(6) as JSON?

    open var errorSnapshot: JSON?
        set(value): Unit = set(7, value)
        get(): JSON? = get(7) as JSON?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised WithdrawalResponsesRecord
     */
    constructor(id: Long? = null, version: ULong? = null, createdAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null, idempotencyKey: String? = null, withdrawalToken: String? = null, responseSnapshot: JSON? = null, errorSnapshot: JSON? = null): this() {
        this.id = id
        this.version = version
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        this.idempotencyKey = idempotencyKey
        this.withdrawalToken = withdrawalToken
        this.responseSnapshot = responseSnapshot
        this.errorSnapshot = errorSnapshot
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised WithdrawalResponsesRecord
     */
    constructor(value: xyz.block.bittycity.outie.jooq.generated.tables.pojos.WithdrawalResponses?): this() {
        if (value != null) {
            this.id = value.id
            this.version = value.version
            this.createdAt = value.createdAt
            this.updatedAt = value.updatedAt
            this.idempotencyKey = value.idempotencyKey
            this.withdrawalToken = value.withdrawalToken
            this.responseSnapshot = value.responseSnapshot
            this.errorSnapshot = value.errorSnapshot
            resetChangedOnNotNull()
        }
    }
}
