/*
 * This file is generated by jOOQ.
 */
package xyz.block.bittycity.outie.jooq.generated.tables


import java.time.LocalDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong

import xyz.block.bittycity.outie.jooq.generated.BittyCity
import xyz.block.bittycity.outie.jooq.generated.indexes.WITHDRAWALS_IX_WITHDRAWALS_STATE_UPDATED_AT
import xyz.block.bittycity.outie.jooq.generated.indexes.WITHDRAWALS_LEDGER_ENTRY_TOKEN_IDX
import xyz.block.bittycity.outie.jooq.generated.indexes.WITHDRAWALS_MERCHANT_TOKEN_IDX_NONUNIQUE
import xyz.block.bittycity.outie.jooq.generated.indexes.WITHDRAWALS_STATE_IDX
import xyz.block.bittycity.outie.jooq.generated.keys.KEY_WITHDRAWALS_PRIMARY
import xyz.block.bittycity.outie.jooq.generated.keys.KEY_WITHDRAWALS_TOKEN_IDX
import xyz.block.bittycity.outie.jooq.generated.tables.records.WithdrawalsRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Withdrawals(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, WithdrawalsRecord>?,
    parentPath: InverseForeignKey<out Record, WithdrawalsRecord>?,
    aliased: Table<WithdrawalsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<WithdrawalsRecord>(
    alias,
    BittyCity.BITTY_CITY,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>bitty_city.withdrawals</code>
         */
        val WITHDRAWALS: Withdrawals = Withdrawals()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<WithdrawalsRecord> = WithdrawalsRecord::class.java

    /**
     * The column <code>bitty_city.withdrawals.id</code>.
     */
    val ID: TableField<WithdrawalsRecord, ULong?> = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "")

    /**
     * The column <code>bitty_city.withdrawals.version</code>.
     */
    val VERSION: TableField<WithdrawalsRecord, ULong?> = createField(DSL.name("version"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>bitty_city.withdrawals.created_at</code>.
     */
    val CREATED_AT: TableField<WithdrawalsRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>bitty_city.withdrawals.updated_at</code>.
     */
    val UPDATED_AT: TableField<WithdrawalsRecord, LocalDateTime?> = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>bitty_city.withdrawals.token</code>.
     */
    val TOKEN: TableField<WithdrawalsRecord, String?> = createField(DSL.name("token"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column <code>bitty_city.withdrawals.merchant_token</code>.
     */
    val MERCHANT_TOKEN: TableField<WithdrawalsRecord, String?> = createField(DSL.name("merchant_token"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column <code>bitty_city.withdrawals.source_balance_token</code>.
     */
    val SOURCE_BALANCE_TOKEN: TableField<WithdrawalsRecord, String?> = createField(DSL.name("source_balance_token"), SQLDataType.VARCHAR(128), this, "")

    /**
     * The column <code>bitty_city.withdrawals.state</code>.
     */
    val STATE: TableField<WithdrawalsRecord, String?> = createField(DSL.name("state"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>bitty_city.withdrawals.source</code>.
     */
    val SOURCE: TableField<WithdrawalsRecord, String?> = createField(DSL.name("source"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("BITTY", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>bitty_city.withdrawals.satoshis</code>.
     */
    val SATOSHIS: TableField<WithdrawalsRecord, ULong?> = createField(DSL.name("satoshis"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>bitty_city.withdrawals.target_wallet</code>.
     */
    val TARGET_WALLET: TableField<WithdrawalsRecord, String?> = createField(DSL.name("target_wallet"), SQLDataType.VARCHAR(128), this, "")

    /**
     * The column <code>bitty_city.withdrawals.ledger_entry_token</code>.
     */
    val LEDGER_ENTRY_TOKEN: TableField<WithdrawalsRecord, String?> = createField(DSL.name("ledger_entry_token"), SQLDataType.VARCHAR(128), this, "")

    /**
     * The column <code>bitty_city.withdrawals.fiat_value_units</code>.
     */
    val FIAT_VALUE_UNITS: TableField<WithdrawalsRecord, Long?> = createField(DSL.name("fiat_value_units"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>bitty_city.withdrawals.fiat_value_currency</code>.
     */
    val FIAT_VALUE_CURRENCY: TableField<WithdrawalsRecord, String?> = createField(DSL.name("fiat_value_currency"), SQLDataType.VARCHAR(16), this, "")

    /**
     * The column <code>bitty_city.withdrawals.failure_reason</code>.
     */
    val FAILURE_REASON: TableField<WithdrawalsRecord, String?> = createField(DSL.name("failure_reason"), SQLDataType.VARCHAR(128), this, "")

    /**
     * The column <code>bitty_city.withdrawals.provider</code>.
     */
    val PROVIDER: TableField<WithdrawalsRecord, String?> = createField(DSL.name("provider"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>bitty_city.withdrawals.blockchain_transaction_id</code>.
     */
    val BLOCKCHAIN_TRANSACTION_ID: TableField<WithdrawalsRecord, String?> = createField(DSL.name("blockchain_transaction_id"), SQLDataType.VARCHAR(128), this, "")

    /**
     * The column <code>bitty_city.withdrawals.note</code>.
     */
    val NOTE: TableField<WithdrawalsRecord, String?> = createField(DSL.name("note"), SQLDataType.VARCHAR(400), this, "")

    /**
     * The column <code>bitty_city.withdrawals.user_has_accepted_risk</code>.
     */
    val USER_HAS_ACCEPTED_RISK: TableField<WithdrawalsRecord, Byte?> = createField(DSL.name("user_has_accepted_risk"), SQLDataType.TINYINT, this, "")

    /**
     * The column <code>bitty_city.withdrawals.step_up_authenticated</code>.
     */
    val STEP_UP_AUTHENTICATED: TableField<WithdrawalsRecord, Byte?> = createField(DSL.name("step_up_authenticated"), SQLDataType.TINYINT, this, "")

    /**
     * The column <code>bitty_city.withdrawals.selected_speed_ref</code>.
     */
    val SELECTED_SPEED_REF: TableField<WithdrawalsRecord, Long?> = createField(DSL.name("selected_speed_ref"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>bitty_city.withdrawals.user_has_confirmed</code>.
     */
    val USER_HAS_CONFIRMED: TableField<WithdrawalsRecord, Byte?> = createField(DSL.name("user_has_confirmed"), SQLDataType.TINYINT, this, "")

    /**
     * The column <code>bitty_city.withdrawals.exchange_rate_units</code>.
     */
    val EXCHANGE_RATE_UNITS: TableField<WithdrawalsRecord, Long?> = createField(DSL.name("exchange_rate_units"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>bitty_city.withdrawals.exchange_rate_currency</code>.
     */
    val EXCHANGE_RATE_CURRENCY: TableField<WithdrawalsRecord, String?> = createField(DSL.name("exchange_rate_currency"), SQLDataType.VARCHAR(16), this, "")

    /**
     * The column <code>bitty_city.withdrawals.reason_for_withdrawal</code>.
     */
    val REASON_FOR_WITHDRAWAL: TableField<WithdrawalsRecord, String?> = createField(DSL.name("reason_for_withdrawal"), SQLDataType.VARCHAR(400), this, "")

    /**
     * The column <code>bitty_city.withdrawals.fee_refunded</code>.
     */
    val FEE_REFUNDED: TableField<WithdrawalsRecord, Byte?> = createField(DSL.name("fee_refunded"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "")

    /**
     * The column
     * <code>bitty_city.withdrawals.self_attestation_destination</code>.
     */
    val SELF_ATTESTATION_DESTINATION: TableField<WithdrawalsRecord, String?> = createField(DSL.name("self_attestation_destination"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column
     * <code>bitty_city.withdrawals.blockchain_transaction_output_index</code>.
     */
    val BLOCKCHAIN_TRANSACTION_OUTPUT_INDEX: TableField<WithdrawalsRecord, Int?> = createField(DSL.name("blockchain_transaction_output_index"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>bitty_city.withdrawals.previous_target_wallet</code>.
     */
    val PREVIOUS_TARGET_WALLET: TableField<WithdrawalsRecord, String?> = createField(DSL.name("previous_target_wallet"), SQLDataType.VARCHAR(128), this, "")

    /**
     * The column <code>bitty_city.withdrawals.previous_satoshis</code>.
     */
    val PREVIOUS_SATOSHIS: TableField<WithdrawalsRecord, ULong?> = createField(DSL.name("previous_satoshis"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>bitty_city.withdrawals.previous_note</code>.
     */
    val PREVIOUS_NOTE: TableField<WithdrawalsRecord, String?> = createField(DSL.name("previous_note"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>bitty_city.withdrawals.back_counter</code>.
     */
    val BACK_COUNTER: TableField<WithdrawalsRecord, Int?> = createField(DSL.name("back_counter"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>bitty_city.withdrawals.previous_selected_speed</code>.
     */
    val PREVIOUS_SELECTED_SPEED: TableField<WithdrawalsRecord, Long?> = createField(DSL.name("previous_selected_speed"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<WithdrawalsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<WithdrawalsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<WithdrawalsRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>bitty_city.withdrawals</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>bitty_city.withdrawals</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>bitty_city.withdrawals</code> table reference
     */
    constructor(): this(DSL.name("withdrawals"), null)
    override fun getSchema(): Schema? = if (aliased()) null else BittyCity.BITTY_CITY
    override fun getIndexes(): List<Index> = listOf(WITHDRAWALS_IX_WITHDRAWALS_STATE_UPDATED_AT, WITHDRAWALS_LEDGER_ENTRY_TOKEN_IDX, WITHDRAWALS_MERCHANT_TOKEN_IDX_NONUNIQUE, WITHDRAWALS_STATE_IDX)
    override fun getIdentity(): Identity<WithdrawalsRecord, ULong?> = super.getIdentity() as Identity<WithdrawalsRecord, ULong?>
    override fun getPrimaryKey(): UniqueKey<WithdrawalsRecord> = KEY_WITHDRAWALS_PRIMARY
    override fun getUniqueKeys(): List<UniqueKey<WithdrawalsRecord>> = listOf(KEY_WITHDRAWALS_TOKEN_IDX)
    override fun `as`(alias: String): Withdrawals = Withdrawals(DSL.name(alias), this)
    override fun `as`(alias: Name): Withdrawals = Withdrawals(alias, this)
    override fun `as`(alias: Table<*>): Withdrawals = Withdrawals(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Withdrawals = Withdrawals(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Withdrawals = Withdrawals(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Withdrawals = Withdrawals(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition): Withdrawals = Withdrawals(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Withdrawals = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition): Withdrawals = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>): Withdrawals = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Withdrawals = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Withdrawals = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Withdrawals = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Withdrawals = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Withdrawals = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Withdrawals = where(DSL.notExists(select))
}
