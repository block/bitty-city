/*
 * This file is generated by jOOQ.
 */
package xyz.block.bittycity.outie.jooq.generated.tables.records


import java.time.LocalDateTime

import org.jooq.JSON
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.ULong

import xyz.block.bittycity.outie.jooq.generated.tables.WithdrawalEvents


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class WithdrawalEventsRecord() : UpdatableRecordImpl<WithdrawalEventsRecord>(WithdrawalEvents.WITHDRAWAL_EVENTS) {

    open var id: ULong?
        set(value): Unit = set(0, value)
        get(): ULong? = get(0) as ULong?

    open var version: ULong?
        set(value): Unit = set(1, value)
        get(): ULong? = get(1) as ULong?

    open var createdAt: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    open var updatedAt: LocalDateTime?
        set(value): Unit = set(3, value)
        get(): LocalDateTime? = get(3) as LocalDateTime?

    open var withdrawalId: Long?
        set(value): Unit = set(4, value)
        get(): Long? = get(4) as Long?

    open var fromState: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var toState: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsProcessed")
    open var isProcessed: Byte?
        set(value): Unit = set(7, value)
        get(): Byte? = get(7) as Byte?

    open var withdrawalSnapshot: JSON?
        set(value): Unit = set(8, value)
        get(): JSON? = get(8) as JSON?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<ULong?> = super.key() as Record1<ULong?>

    /**
     * Create a detached, initialised WithdrawalEventsRecord
     */
    constructor(id: ULong? = null, version: ULong? = null, createdAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null, withdrawalId: Long? = null, fromState: String? = null, toState: String? = null, isProcessed: Byte? = null, withdrawalSnapshot: JSON? = null): this() {
        this.id = id
        this.version = version
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        this.withdrawalId = withdrawalId
        this.fromState = fromState
        this.toState = toState
        this.isProcessed = isProcessed
        this.withdrawalSnapshot = withdrawalSnapshot
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised WithdrawalEventsRecord
     */
    constructor(value: xyz.block.bittycity.outie.jooq.generated.tables.pojos.WithdrawalEvents?): this() {
        if (value != null) {
            this.id = value.id
            this.version = value.version
            this.createdAt = value.createdAt
            this.updatedAt = value.updatedAt
            this.withdrawalId = value.withdrawalId
            this.fromState = value.fromState
            this.toState = value.toState
            this.isProcessed = value.isProcessed
            this.withdrawalSnapshot = value.withdrawalSnapshot
            resetChangedOnNotNull()
        }
    }
}
