/*
 * This file is generated by jOOQ.
 */
package xyz.block.bittycity.outie.jooq.generated.tables


import java.time.LocalDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.JSON
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong

import xyz.block.bittycity.outie.jooq.generated.BittyCity
import xyz.block.bittycity.outie.jooq.generated.indexes.WITHDRAWAL_RESPONSES_WITHDRAWAL_TOKEN_IDX
import xyz.block.bittycity.outie.jooq.generated.keys.KEY_WITHDRAWAL_RESPONSES_IDEMPOTENCY_KEY
import xyz.block.bittycity.outie.jooq.generated.keys.KEY_WITHDRAWAL_RESPONSES_IDEMPOTENCY_KEY_IDX
import xyz.block.bittycity.outie.jooq.generated.keys.KEY_WITHDRAWAL_RESPONSES_PRIMARY
import xyz.block.bittycity.outie.jooq.generated.tables.records.WithdrawalResponsesRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class WithdrawalResponses(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, WithdrawalResponsesRecord>?,
    parentPath: InverseForeignKey<out Record, WithdrawalResponsesRecord>?,
    aliased: Table<WithdrawalResponsesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<WithdrawalResponsesRecord>(
    alias,
    BittyCity.BITTY_CITY,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>bitty_city.withdrawal_responses</code>
         */
        val WITHDRAWAL_RESPONSES: WithdrawalResponses = WithdrawalResponses()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<WithdrawalResponsesRecord> = WithdrawalResponsesRecord::class.java

    /**
     * The column <code>bitty_city.withdrawal_responses.id</code>.
     */
    val ID: TableField<WithdrawalResponsesRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>bitty_city.withdrawal_responses.version</code>.
     */
    val VERSION: TableField<WithdrawalResponsesRecord, ULong?> = createField(DSL.name("version"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>bitty_city.withdrawal_responses.created_at</code>.
     */
    val CREATED_AT: TableField<WithdrawalResponsesRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>bitty_city.withdrawal_responses.updated_at</code>.
     */
    val UPDATED_AT: TableField<WithdrawalResponsesRecord, LocalDateTime?> = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>bitty_city.withdrawal_responses.idempotency_key</code>.
     */
    val IDEMPOTENCY_KEY: TableField<WithdrawalResponsesRecord, String?> = createField(DSL.name("idempotency_key"), SQLDataType.VARCHAR(32).nullable(false), this, "")

    /**
     * The column <code>bitty_city.withdrawal_responses.withdrawal_token</code>.
     */
    val WITHDRAWAL_TOKEN: TableField<WithdrawalResponsesRecord, String?> = createField(DSL.name("withdrawal_token"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column
     * <code>bitty_city.withdrawal_responses.response_snapshot</code>.
     */
    val RESPONSE_SNAPSHOT: TableField<WithdrawalResponsesRecord, JSON?> = createField(DSL.name("response_snapshot"), SQLDataType.JSON, this, "")

    /**
     * The column <code>bitty_city.withdrawal_responses.error_snapshot</code>.
     */
    val ERROR_SNAPSHOT: TableField<WithdrawalResponsesRecord, JSON?> = createField(DSL.name("error_snapshot"), SQLDataType.JSON, this, "")

    private constructor(alias: Name, aliased: Table<WithdrawalResponsesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<WithdrawalResponsesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<WithdrawalResponsesRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>bitty_city.withdrawal_responses</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>bitty_city.withdrawal_responses</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>bitty_city.withdrawal_responses</code> table reference
     */
    constructor(): this(DSL.name("withdrawal_responses"), null)
    override fun getSchema(): Schema? = if (aliased()) null else BittyCity.BITTY_CITY
    override fun getIndexes(): List<Index> = listOf(WITHDRAWAL_RESPONSES_WITHDRAWAL_TOKEN_IDX)
    override fun getIdentity(): Identity<WithdrawalResponsesRecord, Long?> = super.getIdentity() as Identity<WithdrawalResponsesRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<WithdrawalResponsesRecord> = KEY_WITHDRAWAL_RESPONSES_PRIMARY
    override fun getUniqueKeys(): List<UniqueKey<WithdrawalResponsesRecord>> = listOf(KEY_WITHDRAWAL_RESPONSES_IDEMPOTENCY_KEY, KEY_WITHDRAWAL_RESPONSES_IDEMPOTENCY_KEY_IDX)
    override fun `as`(alias: String): WithdrawalResponses = WithdrawalResponses(DSL.name(alias), this)
    override fun `as`(alias: Name): WithdrawalResponses = WithdrawalResponses(alias, this)
    override fun `as`(alias: Table<*>): WithdrawalResponses = WithdrawalResponses(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): WithdrawalResponses = WithdrawalResponses(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): WithdrawalResponses = WithdrawalResponses(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): WithdrawalResponses = WithdrawalResponses(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition): WithdrawalResponses = WithdrawalResponses(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): WithdrawalResponses = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition): WithdrawalResponses = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>): WithdrawalResponses = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): WithdrawalResponses = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): WithdrawalResponses = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): WithdrawalResponses = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): WithdrawalResponses = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): WithdrawalResponses = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): WithdrawalResponses = where(DSL.notExists(select))
}
