/*
 * This file is generated by jOOQ.
 */
package xyz.block.bittycity.outie.jooq.generated.tables.pojos


import java.io.Serializable
import java.time.LocalDateTime

import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
data class Withdrawals(
    val id: ULong? = null,
    val version: ULong? = null,
    val createdAt: LocalDateTime? = null,
    val updatedAt: LocalDateTime? = null,
    val token: String? = null,
    val merchantToken: String? = null,
    val sourceBalanceToken: String? = null,
    val state: String? = null,
    val source: String? = null,
    val satoshis: ULong? = null,
    val targetWallet: String? = null,
    val ledgerEntryToken: String? = null,
    val fiatValueUnits: Long? = null,
    val fiatValueCurrency: String? = null,
    val failureReason: String? = null,
    val provider: String? = null,
    val blockchainTransactionId: String? = null,
    val note: String? = null,
    val userHasAcceptedRisk: Byte? = null,
    val stepUpAuthenticated: Byte? = null,
    val selectedSpeedRef: Long? = null,
    val userHasConfirmed: Byte? = null,
    val exchangeRateUnits: Long? = null,
    val exchangeRateCurrency: String? = null,
    val reasonForWithdrawal: String? = null,
    val feeRefunded: Byte? = null,
    val selfAttestationDestination: String? = null,
    val blockchainTransactionOutputIndex: Int? = null,
    val previousTargetWallet: String? = null,
    val previousSatoshis: ULong? = null,
    val previousNote: String? = null,
    val backCounter: Int? = null,
    val previousSelectedSpeed: Long? = null
): Serializable {

    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: Withdrawals = other as Withdrawals
        if (this.id == null) {
            if (o.id != null)
                return false
        }
        else if (this.id != o.id)
            return false
        if (this.version == null) {
            if (o.version != null)
                return false
        }
        else if (this.version != o.version)
            return false
        if (this.createdAt == null) {
            if (o.createdAt != null)
                return false
        }
        else if (this.createdAt != o.createdAt)
            return false
        if (this.updatedAt == null) {
            if (o.updatedAt != null)
                return false
        }
        else if (this.updatedAt != o.updatedAt)
            return false
        if (this.token == null) {
            if (o.token != null)
                return false
        }
        else if (this.token != o.token)
            return false
        if (this.merchantToken == null) {
            if (o.merchantToken != null)
                return false
        }
        else if (this.merchantToken != o.merchantToken)
            return false
        if (this.sourceBalanceToken == null) {
            if (o.sourceBalanceToken != null)
                return false
        }
        else if (this.sourceBalanceToken != o.sourceBalanceToken)
            return false
        if (this.state == null) {
            if (o.state != null)
                return false
        }
        else if (this.state != o.state)
            return false
        if (this.source == null) {
            if (o.source != null)
                return false
        }
        else if (this.source != o.source)
            return false
        if (this.satoshis == null) {
            if (o.satoshis != null)
                return false
        }
        else if (this.satoshis != o.satoshis)
            return false
        if (this.targetWallet == null) {
            if (o.targetWallet != null)
                return false
        }
        else if (this.targetWallet != o.targetWallet)
            return false
        if (this.ledgerEntryToken == null) {
            if (o.ledgerEntryToken != null)
                return false
        }
        else if (this.ledgerEntryToken != o.ledgerEntryToken)
            return false
        if (this.fiatValueUnits == null) {
            if (o.fiatValueUnits != null)
                return false
        }
        else if (this.fiatValueUnits != o.fiatValueUnits)
            return false
        if (this.fiatValueCurrency == null) {
            if (o.fiatValueCurrency != null)
                return false
        }
        else if (this.fiatValueCurrency != o.fiatValueCurrency)
            return false
        if (this.failureReason == null) {
            if (o.failureReason != null)
                return false
        }
        else if (this.failureReason != o.failureReason)
            return false
        if (this.provider == null) {
            if (o.provider != null)
                return false
        }
        else if (this.provider != o.provider)
            return false
        if (this.blockchainTransactionId == null) {
            if (o.blockchainTransactionId != null)
                return false
        }
        else if (this.blockchainTransactionId != o.blockchainTransactionId)
            return false
        if (this.note == null) {
            if (o.note != null)
                return false
        }
        else if (this.note != o.note)
            return false
        if (this.userHasAcceptedRisk == null) {
            if (o.userHasAcceptedRisk != null)
                return false
        }
        else if (this.userHasAcceptedRisk != o.userHasAcceptedRisk)
            return false
        if (this.stepUpAuthenticated == null) {
            if (o.stepUpAuthenticated != null)
                return false
        }
        else if (this.stepUpAuthenticated != o.stepUpAuthenticated)
            return false
        if (this.selectedSpeedRef == null) {
            if (o.selectedSpeedRef != null)
                return false
        }
        else if (this.selectedSpeedRef != o.selectedSpeedRef)
            return false
        if (this.userHasConfirmed == null) {
            if (o.userHasConfirmed != null)
                return false
        }
        else if (this.userHasConfirmed != o.userHasConfirmed)
            return false
        if (this.exchangeRateUnits == null) {
            if (o.exchangeRateUnits != null)
                return false
        }
        else if (this.exchangeRateUnits != o.exchangeRateUnits)
            return false
        if (this.exchangeRateCurrency == null) {
            if (o.exchangeRateCurrency != null)
                return false
        }
        else if (this.exchangeRateCurrency != o.exchangeRateCurrency)
            return false
        if (this.reasonForWithdrawal == null) {
            if (o.reasonForWithdrawal != null)
                return false
        }
        else if (this.reasonForWithdrawal != o.reasonForWithdrawal)
            return false
        if (this.feeRefunded == null) {
            if (o.feeRefunded != null)
                return false
        }
        else if (this.feeRefunded != o.feeRefunded)
            return false
        if (this.selfAttestationDestination == null) {
            if (o.selfAttestationDestination != null)
                return false
        }
        else if (this.selfAttestationDestination != o.selfAttestationDestination)
            return false
        if (this.blockchainTransactionOutputIndex == null) {
            if (o.blockchainTransactionOutputIndex != null)
                return false
        }
        else if (this.blockchainTransactionOutputIndex != o.blockchainTransactionOutputIndex)
            return false
        if (this.previousTargetWallet == null) {
            if (o.previousTargetWallet != null)
                return false
        }
        else if (this.previousTargetWallet != o.previousTargetWallet)
            return false
        if (this.previousSatoshis == null) {
            if (o.previousSatoshis != null)
                return false
        }
        else if (this.previousSatoshis != o.previousSatoshis)
            return false
        if (this.previousNote == null) {
            if (o.previousNote != null)
                return false
        }
        else if (this.previousNote != o.previousNote)
            return false
        if (this.backCounter == null) {
            if (o.backCounter != null)
                return false
        }
        else if (this.backCounter != o.backCounter)
            return false
        if (this.previousSelectedSpeed == null) {
            if (o.previousSelectedSpeed != null)
                return false
        }
        else if (this.previousSelectedSpeed != o.previousSelectedSpeed)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + (if (this.id == null) 0 else this.id.hashCode())
        result = prime * result + (if (this.version == null) 0 else this.version.hashCode())
        result = prime * result + (if (this.createdAt == null) 0 else this.createdAt.hashCode())
        result = prime * result + (if (this.updatedAt == null) 0 else this.updatedAt.hashCode())
        result = prime * result + (if (this.token == null) 0 else this.token.hashCode())
        result = prime * result + (if (this.merchantToken == null) 0 else this.merchantToken.hashCode())
        result = prime * result + (if (this.sourceBalanceToken == null) 0 else this.sourceBalanceToken.hashCode())
        result = prime * result + (if (this.state == null) 0 else this.state.hashCode())
        result = prime * result + (if (this.source == null) 0 else this.source.hashCode())
        result = prime * result + (if (this.satoshis == null) 0 else this.satoshis.hashCode())
        result = prime * result + (if (this.targetWallet == null) 0 else this.targetWallet.hashCode())
        result = prime * result + (if (this.ledgerEntryToken == null) 0 else this.ledgerEntryToken.hashCode())
        result = prime * result + (if (this.fiatValueUnits == null) 0 else this.fiatValueUnits.hashCode())
        result = prime * result + (if (this.fiatValueCurrency == null) 0 else this.fiatValueCurrency.hashCode())
        result = prime * result + (if (this.failureReason == null) 0 else this.failureReason.hashCode())
        result = prime * result + (if (this.provider == null) 0 else this.provider.hashCode())
        result = prime * result + (if (this.blockchainTransactionId == null) 0 else this.blockchainTransactionId.hashCode())
        result = prime * result + (if (this.note == null) 0 else this.note.hashCode())
        result = prime * result + (if (this.userHasAcceptedRisk == null) 0 else this.userHasAcceptedRisk.hashCode())
        result = prime * result + (if (this.stepUpAuthenticated == null) 0 else this.stepUpAuthenticated.hashCode())
        result = prime * result + (if (this.selectedSpeedRef == null) 0 else this.selectedSpeedRef.hashCode())
        result = prime * result + (if (this.userHasConfirmed == null) 0 else this.userHasConfirmed.hashCode())
        result = prime * result + (if (this.exchangeRateUnits == null) 0 else this.exchangeRateUnits.hashCode())
        result = prime * result + (if (this.exchangeRateCurrency == null) 0 else this.exchangeRateCurrency.hashCode())
        result = prime * result + (if (this.reasonForWithdrawal == null) 0 else this.reasonForWithdrawal.hashCode())
        result = prime * result + (if (this.feeRefunded == null) 0 else this.feeRefunded.hashCode())
        result = prime * result + (if (this.selfAttestationDestination == null) 0 else this.selfAttestationDestination.hashCode())
        result = prime * result + (if (this.blockchainTransactionOutputIndex == null) 0 else this.blockchainTransactionOutputIndex.hashCode())
        result = prime * result + (if (this.previousTargetWallet == null) 0 else this.previousTargetWallet.hashCode())
        result = prime * result + (if (this.previousSatoshis == null) 0 else this.previousSatoshis.hashCode())
        result = prime * result + (if (this.previousNote == null) 0 else this.previousNote.hashCode())
        result = prime * result + (if (this.backCounter == null) 0 else this.backCounter.hashCode())
        result = prime * result + (if (this.previousSelectedSpeed == null) 0 else this.previousSelectedSpeed.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("Withdrawals (")

        sb.append(id)
        sb.append(", ").append(version)
        sb.append(", ").append(createdAt)
        sb.append(", ").append(updatedAt)
        sb.append(", ").append(token)
        sb.append(", ").append(merchantToken)
        sb.append(", ").append(sourceBalanceToken)
        sb.append(", ").append(state)
        sb.append(", ").append(source)
        sb.append(", ").append(satoshis)
        sb.append(", ").append(targetWallet)
        sb.append(", ").append(ledgerEntryToken)
        sb.append(", ").append(fiatValueUnits)
        sb.append(", ").append(fiatValueCurrency)
        sb.append(", ").append(failureReason)
        sb.append(", ").append(provider)
        sb.append(", ").append(blockchainTransactionId)
        sb.append(", ").append(note)
        sb.append(", ").append(userHasAcceptedRisk)
        sb.append(", ").append(stepUpAuthenticated)
        sb.append(", ").append(selectedSpeedRef)
        sb.append(", ").append(userHasConfirmed)
        sb.append(", ").append(exchangeRateUnits)
        sb.append(", ").append(exchangeRateCurrency)
        sb.append(", ").append(reasonForWithdrawal)
        sb.append(", ").append(feeRefunded)
        sb.append(", ").append(selfAttestationDestination)
        sb.append(", ").append(blockchainTransactionOutputIndex)
        sb.append(", ").append(previousTargetWallet)
        sb.append(", ").append(previousSatoshis)
        sb.append(", ").append(previousNote)
        sb.append(", ").append(backCounter)
        sb.append(", ").append(previousSelectedSpeed)

        sb.append(")")
        return sb.toString()
    }
}
