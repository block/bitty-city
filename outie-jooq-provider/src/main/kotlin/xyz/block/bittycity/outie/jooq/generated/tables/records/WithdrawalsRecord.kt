/*
 * This file is generated by jOOQ.
 */
package xyz.block.bittycity.outie.jooq.generated.tables.records


import java.time.LocalDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.ULong

import xyz.block.bittycity.outie.jooq.generated.tables.Withdrawals


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class WithdrawalsRecord() : UpdatableRecordImpl<WithdrawalsRecord>(Withdrawals.WITHDRAWALS) {

    open var id: ULong?
        set(value): Unit = set(0, value)
        get(): ULong? = get(0) as ULong?

    open var version: ULong?
        set(value): Unit = set(1, value)
        get(): ULong? = get(1) as ULong?

    open var createdAt: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    open var updatedAt: LocalDateTime?
        set(value): Unit = set(3, value)
        get(): LocalDateTime? = get(3) as LocalDateTime?

    open var token: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var merchantToken: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var sourceBalanceToken: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var state: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var source: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    open var satoshis: ULong?
        set(value): Unit = set(9, value)
        get(): ULong? = get(9) as ULong?

    open var targetWallet: String?
        set(value): Unit = set(10, value)
        get(): String? = get(10) as String?

    open var ledgerEntryToken: String?
        set(value): Unit = set(11, value)
        get(): String? = get(11) as String?

    open var fiatValueUnits: Long?
        set(value): Unit = set(12, value)
        get(): Long? = get(12) as Long?

    open var fiatValueCurrency: String?
        set(value): Unit = set(13, value)
        get(): String? = get(13) as String?

    open var failureReason: String?
        set(value): Unit = set(14, value)
        get(): String? = get(14) as String?

    open var provider: String?
        set(value): Unit = set(15, value)
        get(): String? = get(15) as String?

    open var blockchainTransactionId: String?
        set(value): Unit = set(16, value)
        get(): String? = get(16) as String?

    open var note: String?
        set(value): Unit = set(17, value)
        get(): String? = get(17) as String?

    open var userHasAcceptedRisk: Byte?
        set(value): Unit = set(18, value)
        get(): Byte? = get(18) as Byte?

    open var stepUpAuthenticated: Byte?
        set(value): Unit = set(19, value)
        get(): Byte? = get(19) as Byte?

    open var selectedSpeedRef: Long?
        set(value): Unit = set(20, value)
        get(): Long? = get(20) as Long?

    open var userHasConfirmed: Byte?
        set(value): Unit = set(21, value)
        get(): Byte? = get(21) as Byte?

    open var exchangeRateUnits: Long?
        set(value): Unit = set(22, value)
        get(): Long? = get(22) as Long?

    open var exchangeRateCurrency: String?
        set(value): Unit = set(23, value)
        get(): String? = get(23) as String?

    open var reasonForWithdrawal: String?
        set(value): Unit = set(24, value)
        get(): String? = get(24) as String?

    open var feeRefunded: Byte?
        set(value): Unit = set(25, value)
        get(): Byte? = get(25) as Byte?

    open var selfAttestationDestination: String?
        set(value): Unit = set(26, value)
        get(): String? = get(26) as String?

    open var blockchainTransactionOutputIndex: Int?
        set(value): Unit = set(27, value)
        get(): Int? = get(27) as Int?

    open var previousTargetWallet: String?
        set(value): Unit = set(28, value)
        get(): String? = get(28) as String?

    open var previousSatoshis: ULong?
        set(value): Unit = set(29, value)
        get(): ULong? = get(29) as ULong?

    open var previousNote: String?
        set(value): Unit = set(30, value)
        get(): String? = get(30) as String?

    open var backCounter: Int?
        set(value): Unit = set(31, value)
        get(): Int? = get(31) as Int?

    open var previousSelectedSpeed: Long?
        set(value): Unit = set(32, value)
        get(): Long? = get(32) as Long?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<ULong?> = super.key() as Record1<ULong?>

    /**
     * Create a detached, initialised WithdrawalsRecord
     */
    constructor(id: ULong? = null, version: ULong? = null, createdAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null, token: String? = null, merchantToken: String? = null, sourceBalanceToken: String? = null, state: String? = null, source: String? = null, satoshis: ULong? = null, targetWallet: String? = null, ledgerEntryToken: String? = null, fiatValueUnits: Long? = null, fiatValueCurrency: String? = null, failureReason: String? = null, provider: String? = null, blockchainTransactionId: String? = null, note: String? = null, userHasAcceptedRisk: Byte? = null, stepUpAuthenticated: Byte? = null, selectedSpeedRef: Long? = null, userHasConfirmed: Byte? = null, exchangeRateUnits: Long? = null, exchangeRateCurrency: String? = null, reasonForWithdrawal: String? = null, feeRefunded: Byte? = null, selfAttestationDestination: String? = null, blockchainTransactionOutputIndex: Int? = null, previousTargetWallet: String? = null, previousSatoshis: ULong? = null, previousNote: String? = null, backCounter: Int? = null, previousSelectedSpeed: Long? = null): this() {
        this.id = id
        this.version = version
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        this.token = token
        this.merchantToken = merchantToken
        this.sourceBalanceToken = sourceBalanceToken
        this.state = state
        this.source = source
        this.satoshis = satoshis
        this.targetWallet = targetWallet
        this.ledgerEntryToken = ledgerEntryToken
        this.fiatValueUnits = fiatValueUnits
        this.fiatValueCurrency = fiatValueCurrency
        this.failureReason = failureReason
        this.provider = provider
        this.blockchainTransactionId = blockchainTransactionId
        this.note = note
        this.userHasAcceptedRisk = userHasAcceptedRisk
        this.stepUpAuthenticated = stepUpAuthenticated
        this.selectedSpeedRef = selectedSpeedRef
        this.userHasConfirmed = userHasConfirmed
        this.exchangeRateUnits = exchangeRateUnits
        this.exchangeRateCurrency = exchangeRateCurrency
        this.reasonForWithdrawal = reasonForWithdrawal
        this.feeRefunded = feeRefunded
        this.selfAttestationDestination = selfAttestationDestination
        this.blockchainTransactionOutputIndex = blockchainTransactionOutputIndex
        this.previousTargetWallet = previousTargetWallet
        this.previousSatoshis = previousSatoshis
        this.previousNote = previousNote
        this.backCounter = backCounter
        this.previousSelectedSpeed = previousSelectedSpeed
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised WithdrawalsRecord
     */
    constructor(value: xyz.block.bittycity.outie.jooq.generated.tables.pojos.Withdrawals?): this() {
        if (value != null) {
            this.id = value.id
            this.version = value.version
            this.createdAt = value.createdAt
            this.updatedAt = value.updatedAt
            this.token = value.token
            this.merchantToken = value.merchantToken
            this.sourceBalanceToken = value.sourceBalanceToken
            this.state = value.state
            this.source = value.source
            this.satoshis = value.satoshis
            this.targetWallet = value.targetWallet
            this.ledgerEntryToken = value.ledgerEntryToken
            this.fiatValueUnits = value.fiatValueUnits
            this.fiatValueCurrency = value.fiatValueCurrency
            this.failureReason = value.failureReason
            this.provider = value.provider
            this.blockchainTransactionId = value.blockchainTransactionId
            this.note = value.note
            this.userHasAcceptedRisk = value.userHasAcceptedRisk
            this.stepUpAuthenticated = value.stepUpAuthenticated
            this.selectedSpeedRef = value.selectedSpeedRef
            this.userHasConfirmed = value.userHasConfirmed
            this.exchangeRateUnits = value.exchangeRateUnits
            this.exchangeRateCurrency = value.exchangeRateCurrency
            this.reasonForWithdrawal = value.reasonForWithdrawal
            this.feeRefunded = value.feeRefunded
            this.selfAttestationDestination = value.selfAttestationDestination
            this.blockchainTransactionOutputIndex = value.blockchainTransactionOutputIndex
            this.previousTargetWallet = value.previousTargetWallet
            this.previousSatoshis = value.previousSatoshis
            this.previousNote = value.previousNote
            this.backCounter = value.backCounter
            this.previousSelectedSpeed = value.previousSelectedSpeed
            resetChangedOnNotNull()
        }
    }
}
